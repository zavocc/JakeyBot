from core.aimodels.gemini import Completions
from core.ai.assistants import Assistants
from discord.ext import commands
from os import environ
import discord
import logging

class GeminiAIApps(commands.Cog):
    def __init__(self, bot):
        self.bot: discord.Bot = bot
        self.author = environ.get("BOT_NAME", "Jakey Bot")

    ###############################################
    # Rephrase command
    ###############################################
    @commands.message_command(
        name="Rephrase this message",
        contexts={discord.InteractionContextType.guild},
        integration_types={discord.IntegrationType.guild_install},
    )
    async def rephrase(self, ctx, message: discord.Message):
        """Rephrase this message"""
        await ctx.response.defer(ephemeral=True)
        
        # Generative model settings
        _completion = Completions(discord_ctx=ctx, discord_bot=self.bot)
        _system_prompt = await Assistants.set_assistant_type("message_rephraser_prompt", type=1)
        _answer = await _completion.completion(f"Rephrase this message with variety to choose from:\n{str(message.content)}", system_instruction=_system_prompt)

        # Send message in an embed format
        _embed = discord.Embed(
                title="Rephrased Message",
                description=str(_answer),
                color=discord.Color.random()
        )
        _embed.set_footer(text="Responses generated by AI may not give accurate results! Double check with facts!")
        _embed.add_field(name="Referenced messages:", value=message.jump_url, inline=False)
        await ctx.respond(embed=_embed)

    @rephrase.error
    async def on_application_command_error(self, ctx: discord.ApplicationContext, error: discord.DiscordException):
        if isinstance(error, commands.NoPrivateMessage):
            await ctx.respond("❌ Sorry, this feature is not supported in DMs, please use this command inside the guild.")
            return
        
        # Check for safety or blocked prompt errors
        #_exceptions = [genai.types.BlockedPromptException, genai.types.StopCandidateException, ValueError]

        # Get original exception from the DiscordException.original attribute
        #error = getattr(error, "original", error)
        #if any(_iter for _iter in _exceptions if isinstance(error, _iter)):
        await ctx.respond("❌ Sorry, I couldn't rephrase that message. I'm still learning!")
        logging.error("An error has occurred while rephrasing the message, reason: ", exc_info=True)

    ###############################################
    # Explain command
    ###############################################
    @commands.message_command(
        name="Explain this message",
        contexts={discord.InteractionContextType.guild},
        integration_types={discord.IntegrationType.guild_install}
    )
    async def explain(self, ctx, message: discord.Message):
        """Explain this message"""
        await ctx.response.defer(ephemeral=True)

        # Generative model settings
        _completion = Completions(discord_ctx=ctx, discord_bot=self.bot)
        _system_prompt = await Assistants.set_assistant_type("message_summarizer_prompt", type=1)
        _answer = await _completion.completion(f"Explain and summarize based on this message:\n{str(message.content)}", system_instruction=_system_prompt)

        # Send message in an embed format
        _embed = discord.Embed(
                title="Explain this message",
                description=str(_answer),
                color=discord.Color.random()
        )
        _embed.set_footer(text="Responses generated by AI may not give accurate results! Double check with facts!")
        _embed.add_field(name="Referenced messages:", value=message.jump_url, inline=False)
        await ctx.respond(embed=_embed)

    @explain.error
    async def on_application_command_error(self, ctx: discord.ApplicationContext, error: discord.DiscordException):
        if isinstance(error, commands.NoPrivateMessage):
            await ctx.respond("❌ Sorry, this feature is not supported in DMs, please use this command inside the guild.")
            return
        
        # Check for safety or blocked prompt errors
        #_exceptions = [genai.types.BlockedPromptException, genai.types.StopCandidateException, ValueError]

        # Get original exception from the DiscordException.original attribute
        #error = getattr(error, "original", error)
        #if any(_iter for _iter in _exceptions if isinstance(error, _iter)):
        await ctx.respond("❌ Sorry, I couldn't explain that message. I'm still learning!")
        logging.error("An error has occurred while generating message explanations, reason: ", exc_info=True)

    ###############################################
    # Suggestions command
    ###############################################
    @commands.message_command(
        name="Suggest a response",
        contexts={discord.InteractionContextType.guild},
        integration_types={discord.IntegrationType.guild_install}
    )
    async def suggest(self, ctx, message: discord.Message):
        """Suggest a response based on this message"""
        await ctx.response.defer(ephemeral=True)

        # Generative model settings
        _completion = Completions(discord_ctx=ctx, discord_bot=self.bot)
        _system_prompt = await Assistants.set_assistant_type("message_suggestions_prompt", type=1)
        _answer = await _completion.completion(f"Suggest a response based on this message:\n{str(message.content)}", system_instruction=_system_prompt)

        # To protect privacy, send the message to the user
        # Send message in an embed format
        _embed = discord.Embed(
                title="Suggested Responses",
                description=str(_answer),
                color=discord.Color.random()
        )
        _embed.set_footer(text="Responses generated by AI may not give accurate results! Double check with facts!")
        _embed.add_field(name="Referenced messages:", value=message.jump_url, inline=False)
        await ctx.respond(embed=_embed)

    @suggest.error
    async def on_application_command_error(self, ctx: discord.ApplicationContext, error: discord.DiscordException):
        if isinstance(error, commands.NoPrivateMessage):
            await ctx.respond("❌ Sorry, this feature is not supported in DMs, please use this command inside the guild.")
            return
        
        await ctx.respond("❌ Sorry, this is embarrasing but I couldn't suggest good responses. I'm still learning!")
        logging.error("An error has occurred while generating message explanations, reason: ", exc_info=True)

def setup(bot):
    bot.add_cog(GeminiAIApps(bot))
