from aimodels.gemini import Completions
from core.services.helperfunctions import HelperFunctions
from discord.ext import commands
from google.genai import types
from os import environ
import discord
import logging

class GeminiAIApps(commands.Cog):
    def __init__(self, bot):
        self.bot: discord.Bot = bot
        self.author = environ.get("BOT_NAME", "Jakey Bot")

        self._default_model = HelperFunctions.fetch_default_model(
            model_type="base",
            output_modalities="text",
            provider="gemini"
        )["model_name"]

    ###############################################
    # Rephrase command
    ###############################################
    @commands.message_command(
        name="Rephrase this message",
        contexts={discord.InteractionContextType.guild},
        integration_types={discord.IntegrationType.guild_install},
    )
    async def rephrase(self, ctx, message: discord.Message):
        """Rephrase this message"""
        await ctx.response.defer(ephemeral=True)

        # Craft prompt
        _prompt_feed = f"Rephrase this message with variety to choose from:\n{str(message.content)}"
        # Replace mentions with the user's name
        for _mention in message.mentions:
            _prompt_feed = _prompt_feed.replace(f"<@{_mention.id}>", f"(mentions user: {_mention.display_name})")
        
        # Generative model settings
        _completion = Completions(model_name=self._default_model, discord_ctx=ctx, discord_bot=self.bot)
        _system_prompt = await HelperFunctions.set_assistant_type("message_rephraser_prompt", type=1)
        _answer = await _completion.completion(_prompt_feed, system_instruction=_system_prompt)

        # Send message in an embed format
        _embed = discord.Embed(
                title="Rephrased Message",
                description=str(_answer)[:4096],
                color=discord.Color.random()
        )
        _embed.set_footer(text="Responses generated by AI may not give accurate results! Double check with facts!")
        _embed.add_field(name="Referenced messages:", value=message.jump_url, inline=False)
        await ctx.respond(embed=_embed)

    @rephrase.error
    async def on_application_command_error(self, ctx: discord.ApplicationContext, error: discord.DiscordException):
        if isinstance(error, commands.NoPrivateMessage):
            await ctx.respond("❌ Sorry, this feature is not supported in DMs, please use this command inside the guild.")
            return
        
        # Check for safety or blocked prompt errors
        #_exceptions = [genai.types.BlockedPromptException, genai.types.StopCandidateException, ValueError]

        # Get original exception from the DiscordException.original attribute
        #error = getattr(error, "original", error)
        #if any(_iter for _iter in _exceptions if isinstance(error, _iter)):
        await ctx.respond("❌ Sorry, I couldn't rephrase that message. I'm still learning!")
        logging.error("An error has occurred while rephrasing the message, reason: ", exc_info=True)

    ###############################################
    # Explain command
    ###############################################
    @commands.message_command(
        name="Explain this message",
        contexts={discord.InteractionContextType.guild},
        integration_types={discord.IntegrationType.guild_install}
    )
    async def explain(self, ctx, message: discord.Message):
        """Explain this message"""
        await ctx.response.defer(ephemeral=True)

        # Create embed
        _embed = discord.Embed(
            title="Explain this message",
            color=discord.Color.random()
        )

        # Generative model settings
        _completion = Completions(model_name=self._default_model, discord_ctx=ctx, discord_bot=self.bot)
        _system_prompt = await HelperFunctions.set_assistant_type("message_summarizer_prompt", type=1)

        # Craft prompt
        _prompt_feed = [
            f"Explain this Discord message and attached files if exists:\n{str(message.content)}"
        ]

        # Replace mentions with the user's name
        for _mention in message.mentions:
            _prompt_feed[0] = _prompt_feed[0].replace(f"<@{_mention.id}>", f"(mentions user: {_mention.display_name})")

        # Check if we have attachments AND it's less than 5MB 
        # And if it's an image, video, audio, or PDF
        # First 4 attachments only
        if message.attachments:
            for _index, _attachment in enumerate(message.attachments):
                if _index > 4:
                    break

                if _attachment.size > 5500000:
                    continue

                if any(_iter in _attachment.content_type for _iter in ["image", "video", "audio", "pdf"]):
                    _prompt_feed.append(
                        types.Part.from_bytes(
                            data=(await _attachment.read()),
                            mime_type=_attachment.content_type.split(";")[0]
                        )
                    )

                _embed.add_field(name="File added to context:", value=_attachment.url, inline=False)

        _answer = await _completion.completion(_prompt_feed, system_instruction=_system_prompt)
       
        # Send message in an embed format
        _embed.description = str(_answer)[:4096]
        _embed.add_field(name="Referenced messages:", value=message.jump_url, inline=False)
        _embed.set_footer(text="Responses generated by AI may not give accurate results! Double check with facts!")
        await ctx.respond(embed=_embed)

    @explain.error
    async def on_application_command_error(self, ctx: discord.ApplicationContext, error: discord.DiscordException):
        if isinstance(error, commands.NoPrivateMessage):
            await ctx.respond("❌ Sorry, this feature is not supported in DMs, please use this command inside the guild.")
            return
        
        # Check for safety or blocked prompt errors
        #_exceptions = [genai.types.BlockedPromptException, genai.types.StopCandidateException, ValueError]

        # Get original exception from the DiscordException.original attribute
        #error = getattr(error, "original", error)
        #if any(_iter for _iter in _exceptions if isinstance(error, _iter)):
        await ctx.respond("❌ Sorry, I couldn't explain that message. I'm still learning!")
        logging.error("An error has occurred while generating message explanations, reason: ", exc_info=True)

    ###############################################
    # Suggestions command
    ###############################################
    @commands.message_command(
        name="Suggest a response",
        contexts={discord.InteractionContextType.guild},
        integration_types={discord.IntegrationType.guild_install}
    )
    async def suggest(self, ctx, message: discord.Message):
        """Suggest a response based on this message"""
        await ctx.response.defer(ephemeral=True)

        # Craft prompt
        _prompt_feed = f"Suggest a response based on this message:\n{str(message.content)}"
        # Replace mentions with the user's name
        for _mention in message.mentions:
            _prompt_feed = _prompt_feed.replace(f"<@{_mention.id}>", f"(mentions user: {_mention.display_name})")

        # Generative model settings
        _completion = Completions(model_name=self._default_model, discord_ctx=ctx, discord_bot=self.bot)
        _system_prompt = await HelperFunctions.set_assistant_type("message_suggestions_prompt", type=1)
        _answer = await _completion.completion(_prompt_feed, system_instruction=_system_prompt)

        # To protect privacy, send the message to the user
        # Send message in an embed format
        _embed = discord.Embed(
                title="Suggested Responses",
                description=str(_answer)[:4096],
                color=discord.Color.random()
        )
        _embed.set_footer(text="Responses generated by AI may not give accurate results! Double check with facts!")
        _embed.add_field(name="Referenced messages:", value=message.jump_url, inline=False)
        await ctx.respond(embed=_embed)

    @suggest.error
    async def on_application_command_error(self, ctx: discord.ApplicationContext, error: discord.DiscordException):
        if isinstance(error, commands.NoPrivateMessage):
            await ctx.respond("❌ Sorry, this feature is not supported in DMs, please use this command inside the guild.")
            return
        
        await ctx.respond("❌ Sorry, this is embarrasing but I couldn't suggest good responses. I'm still learning!")
        logging.error("An error has occurred while generating message explanations, reason: ", exc_info=True)

def setup(bot):
    bot.add_cog(GeminiAIApps(bot))
